class @beta Ecore.Audio.In extends Ecore.Audio
{
   [[Ecore Audio input object.]]
   c_prefix: ecore_audio_obj_in;
   event_c_prefix: ecore_audio_in;
   data: Ecore_Audio_Input;
   methods {
      @property speed {
         [[Playback speed of the input.
         ]]
         set {
         }
         get {
         }
         values {
            speed: double; [[The speed, 1.0 is the default]]
         }
      }
      @property samplerate {
         [[Sample-rate of the input
         ]]
         set {
         }
         get {
         }
         values {
            samplerate: int; [[The samplerate in Hz]]
         }
      }
      @property channels {
         [[Amount of channels the input has
         ]]
         set {
         }
         get {
         }
         values {
            channels: int; [[The number of channels]]
         }
      }
      @property preloaded {
         [[Preloaded state of the input
         ]]
         set {
         }
         get {
         }
         values {
            preloaded: bool; [[$true if the input should be cached, $false otherwise]]
         }
      }
      @property looped {
         [[Looped state of the input

           If the input is looped and reaches the end it will start from the
           beginning again. At the same time the event
           \@ref ECORE_AUDIO_EV_IN_LOOPED will be emitted
         ]]
         set {
         }
         get {
         }
         values {
            looped: bool; [[$true if the input should be looped, $false otherwise]]
         }
      }
      @property length {
         [[Length of the input

           This function is only implemented by some classes
           (i.e. ECORE_AUDIO_OBJ_IN_TONE_CLASS)
         ]]
         set {
         }
         get {
         }
         values {
            length: double; [[The length of the input in seconds]]
         }
      }
      @property output {
         [[The output that this input is attached to
         ]]
         get {
         }
         values {
            output: Ecore.Audio; [[The output]] /* FIXME-cyclic Should be Ecore.Audio.Out */
         }
      }
      @property remaining {
         [[The remaining time of the input
         ]]
         get {
         }
         values {
            remaining: double; [[The amount of time in seconds left to play]]
         }
      }
      read {
         [[Reads from the input
         ]]
         return: ssize; [[The amount of samples written to buf]]
         params {
            @in buf: void_ptr; [[The buffer to read into]]
            @in len: size; [[The amount of samples to read]]
         }
      }
      read_internal {
         [[Internal read function
         ]]
         return: ssize; [[The amount of samples written to buf]]
         params {
            @in buf: void_ptr; [[The buffer to read into]]
            @in len: size; [[The amount of samples to read]]
         }
      }
      seek {
         [[Seeks within the input
         ]]
         return: double; [[The current absolute position in seconds within
                           the input]]
         params {
            @in offs: double; [[The offset in seconds]]
            @in mode: int; [[The seek mode. Is absolute with SEEK_SET,
                             relative to the current position with SEEK_CUR
                             and relative to the end with SEEK_END.]]
         }
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;
      Ecore.Audio.vio_set;
      @empty .length {set;}
      @empty .preloaded {set; get;}
      @empty .seek;
      @empty Ecore.Audio.source {set; get;}
      @empty Ecore.Audio.format {set; get;}
   }
   events {
      in,looped: void; [[Called when an input has looped.]]
      in,stopped: void; [[Called when an input has stopped playing.]]
      in,samplerate,changed: void; [[Called when the input samplerate has changed.]]
   }
}
