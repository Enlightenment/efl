/* TODO: Define these structs in EO, or they are useless to bindings */
struct @extern Elm.Photocam.Error; [[Photocam error information.]]
struct @extern Elm.Photocam.Progress; [[Photocam progress information.]]

class Efl.Ui.Image_Zoomable extends Efl.Ui.Image implements Efl.Ui.Zoom
   composites Efl.Ui.Scrollable, Efl.Ui.Scrollbar
{
   [[Elementary Image Zoomable class]]
   methods {
      @property gesture_enabled {
         [[The gesture state for photocam.

           This sets the gesture state to on or off for photocam. The
           default is off. This will start multi touch zooming.
         ]]
         set {
         }
         get {
         }
         values {
            gesture: bool; [[The gesture state.]]
         }
      }
      @property image_region {
         [[The region of the image that is currently shown

           Setting it shows the region of the image without using animation.
         ]]
         get {
         }
         set {
         }
         values {
            region: Eina.Rect; [[The region in the original image pixels.]]
         }
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.Gfx.Entity.position { set; }
      Efl.Gfx.Entity.size { set; }
      Efl.Gfx.View.view_size { get; }
      Efl.Gfx.Image.image_size { get; }
      Efl.Ui.Image.icon { set; get; }
      Efl.Playable.playable { get; }
      Efl.Player.playing { get; set; }
      Efl.Player.paused { get; set; }
      Efl.Player.playback_position { get; set; }
      Efl.Player.playback_progress { get; }
      Efl.Player.playback_speed { get; set; }
      Efl.Ui.Zoom.zoom_animation { set; get; }
      Efl.Ui.Zoom.zoom_level { set; get; }
      Efl.Ui.Zoom.zoom_mode { set; get; }
      Efl.Canvas.Group.group_member_add;
      Efl.Ui.Widget.theme_apply;
      Efl.Ui.Focus.Object.on_focus_update;
      Efl.Ui.Widget.widget_input_event_handler;
      Efl.Ui.Scrollable.scroll;
      Efl.Access.Widget.Action.elm_actions { get; }
      Efl.File.load;
      Efl.File.unload;
      Efl.File.file { get; set; }
      Efl.Gfx.Image_Orientable.image_orientation { get; set; }
      Efl.Layout.Group.group_size_min { get; }
      Efl.Layout.Group.group_size_max { get; }
     Efl.Layout.Signal.signal_callback_add;
     Efl.Layout.Signal.signal_callback_del;
      //Efl.Canvas.Layout_Group.group_data { get; }
   }
   events {
      press: void; [[Called when photocam got pressed]]
      load: void; [[Called when photocam loading started]]
      loaded: void; [[Called when photocam loading finished]]
      load,detail: void; [[Called when photocal detail loading started]]
      loaded,detail: void; [[Called when photocam detail loading finished]]
      download,start: void; [[Called when photocam download started]]
      download,progress: Elm.Photocam.Progress; [[Called when photocam download progress updated]]
      download,done: void; [[Called when photocam download finished]]
      download,error: Elm.Photocam.Error; [[Called when photocam download failed]]
   }
}
