import eina_types;

abstract @beta Ector.Renderer extends Efl.Object
{
   [[Ector renderer abstract interface]]

   c_prefix: ector_renderer;
   methods {
      @property surface {
         [[Surface associated with this renderer]]
         set {
            [[Do not use.]]
         }
         get {
            [[Gets the surface associated with this renderer. Can not be set.]]
         }
         values {
            s: Ector.Surface; [[Associated surface]]
         }
      }
      @property transformation {
         [[Transformation property]]
         set {
         }
         get {
         }
         values {
            m: ptr(const(Eina.Matrix3)); [[Transformation matrix]]
         }
      }
      @property origin {
         [[Renderer origin]]
         set {
         }
         get {
         }
         values {
            x: double; [[X coordinate]]
            y: double; [[Y coordinate]]
         }
      }
      @property visibility {
         [[The given Ector renderer can be visible or invisible.]]
         set {
         }
         get {
         }
         values {
            v: bool; [[$true to make the object visible, $false otherwise]]
         }
      }
      @property color {
         [[Retrieves the general/main color of the given Ector renderer.

           Retrieves the main color's RGB component (and alpha channel)
           values, which range from 0 to 255. For the alpha channel,
           which defines the object's transparency level, 0 means totally
           transparent, while 255 means opaque. These color values are
           premultiplied by the alpha value.

           Use null pointers on the components you're not interested in,
           they'll be ignored by the function.
         ]]
         set {
         }
         get {
         }
         values {
            r: int; [[The red component of the given color.]]
            g: int; [[The green component of the given color.]]
            b: int; [[The blue component of the given color.]]
            a: int; [[The alpha component of the given color.]]
         }
      }
      @property crc {
         [[Cyclic redundancy check]]
         get {
            return: uint; [[CRC value]]
         }
      }
      @property comp_method {
         [[Set Composite Buffer to this Renderer]]
         set {
         }
         values {
            comp: Ector.Buffer; [[Composite Buffer]]
            method: Efl.Gfx.Vg_Composite_Method; [[Composite method]]
         }
      }
      draw @pure_virtual {
         [[Actual draw operation]]
         return: bool; [[$true on success, $false otherwise]]
         params {
            @in op: Efl.Gfx.Render_Op; [[Renderer operation]]
            @in clips: array<ptr(Eina.Rect)>; [[Array of @Eina.Rect clip]]
            @in mul_col: uint; [[Premultiplied color]]
         }
      }
      prepare @pure_virtual {
         [[Prepare for rendering]]
         return: bool; [[$true on success, $false otherwise]]
      }
   }
   implements {
      Efl.Object.destructor;
      Efl.Object.finalize;
   }
}
