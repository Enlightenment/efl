import efl_canvas_animation_types;

class @beta Efl.Canvas.Animation extends Efl.Object implements Efl.Playable
{
   [[Efl animation class]]
   c_prefix: efl_animation;
   methods {
      @property final_state_keep {
         [[Keep final state property]]
         set {
         }
         get {
         }
         values {
            keep: bool; [[$true to keep final state, $false otherwise.]]
         }
      }
      @property duration {
         [[Duration property]]
         set {
         }
         get {
         }
         values {
            sec: double; [[Duration value.]]
         }
      }
      @property repeat_mode {
         [[Repeat mode property]]
         set {
         }
         get {
         }
         values {
            mode: Efl.Canvas.Animation_Repeat_Mode; [[Repeat mode.]]
         }
      }
      @property repeat_count {
         [[Repeat count property]]
         set {
         }
         get {
         }
         values {
            count: int; [[Repeat count. -1 repeats animation infinitely.]]
         }
      }
      @property start_delay {
         [[Start delay property]]
         set {
         }
         get {
         }
         values {
            sec: double; [[Delay time, in seconds, from when the animation starts until the animation is animated.]]
         }
      }
      @property interpolator {
         [[Interpolator property]]
         set {
         }
         get {
         }
         values {
            interpolator: Efl.Interpolator; [[Interpolator which indicates interpolation function.]]
         }
      }
      animation_apply {
         params {
            @in progress: double;
            @in target: Efl.Canvas.Object;
         }
         return: double; [[Final applied progress.]]
      }
   }
   implements {
      Efl.Playable.length { get; }
      Efl.Playable.seekable { get; }
      Efl.Playable.playable { get; }
   }
}
