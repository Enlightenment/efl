enum @beta Efl.Ui.Panel_Orient
{
   [[Panel orientation mode]]

   top, [[Panel (dis)appears from the top]]
   bottom, [[Panel (dis)appears from the bottom]]
   left, [[Panel (dis)appears from the left]]
   right [[Panel (dis)appears from the right]]
}

struct @beta Efl.Ui.Panel_Scroll_Info
{
   [[Panel scroll information]]
   rel_x: double; [[content scrolled position (0.0 ~ 1.0) in the panel]]
   rel_y: double; [[content scrolled position (0.0 ~ 1.0) in the panel]]
}

class @beta Efl.Ui.Panel extends Efl.Ui.Layout_Base
                         implements Efl.Ui.Focus.Layer, Efl.Content,
                                    Efl.Access.Widget.Action
                         composites Efl.Ui.Scrollable
{
   [[Elementary panel class]]
   methods {
      @property orient {
         [[The orientation of the panel

           Sets from where the panel will (dis)appear.
         ]]
         set {
         }
         get {
         }
         values {
            orient: Efl.Ui.Panel_Orient; [[The panel orientation.]]
         }
      }
      @property hidden {
         [[The state of the panel.]]
         set {
         }
         get {
         }
         values {
            hidden: bool; [[If $true, the panel will run the animation to disappear.]]
         }
      }
      @property scrollable {
         [[The scrollability of the panel.]]
         set {
         }
         get {
         }
         values {
            scrollable: bool; [[The scrollable state.]]
         }
      }
      @property scrollable_content_size {
         [[The size of the scrollable panel.]]
         set {
         }
         get {
         }
         values {
            ratio: double; [[Size ratio]]
         }
      }
      toggle {
         [[Toggle the hidden state of the panel from code]]
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;
      Efl.Gfx.Entity.size { set; }
      Efl.Canvas.Group.group_member_add;
      Efl.Canvas.Group.group_calculate;
      Efl.Ui.Widget.theme_apply;
      Efl.Ui.Widget.disabled {set;}
      Efl.Ui.Widget.on_access_update;
      Efl.Ui.Widget.widget_input_event_handler;
      Efl.Ui.Widget.interest_region { get; }
      Efl.Access.Widget.Action.elm_actions { get; }
      Efl.Ui.I18n.mirrored { set; }
      Efl.Content.content { get; set; }
      Efl.Content.content_unset;
   }
   events {
      toggled: void; [[Called when the hidden state was toggled]]
   }
}
