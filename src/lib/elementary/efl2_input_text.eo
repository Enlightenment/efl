enum Efl2.Input.Text_Panel.Layout
{
   [[Input panel (virtual keyboard) layout types.
     Type of input panel (virtual keyboard) to use - this is a hint and may not provide exactly what is desired.
   ]]
   normal,      [[Default layout.]]
   number,      [[Number layout.]]
   email,       [[Email layout.]]
   url,         [[URL layout.]]
   phonenumber, [[Phone Number layout.]]
   ip,          [[IP layout.]]
   month,       [[Month layout.]]
   numberonly,  [[Number Only layout.]]
   invalid,     [[Never use this.]]
   hex,         [[Hexadecimal layout.]]
   terminal,    [[Command-line terminal layout including esc, alt, ctrl key, so on (no auto-correct, no auto-capitalization).]]
   password,    [[Like normal, but no auto-correct, no auto-capitalization etc.]]
   datetime,    [[Date and time layout

                  @since 1.8]]
   emoticon,    [[Emoticon layout

                  @since 1.10]]
   voice        [[Voice layout, but if the IME does not support voice layout, then normal layout will be shown.

                  @since 1.19]]
}

enum Efl2.Input.Text_Panel.Lang
{
   [[Input panel (virtual keyboard) language modes.
   ]]
   automatic,    [[Automatic]]
   alphabet      [[Alphabet]]
}

enum Efl2.Input.Text_Autocapital.Type
{
   [[Autocapitalization Types.
     Choose method of auto-capitalization.
   ]]
   none,         [[No auto-capitalization when typing.]]
   word,         [[Autocapitalize each word typed.]]
   sentence,     [[Autocapitalize the start of each sentence.]]
   allcharacter  [[Autocapitalize all letters.]]
}

enum Efl2.Input.Text_Panel.Return_Key.Type
{
   [["Return" Key types on the input panel (virtual keyboard).
   ]]
   default, [[Default.]]
   done,    [[Done.]]
   go,      [[Go.]]
   join,    [[Join.]]
   login,   [[Login.]]
   next,    [[Next.]]
   search,  [[Search string or magnifier icon.]]
   send,    [[Send.]]
   signin   [[Sign-in

              @since 1.8]]
}

enum Efl2.Input.Text_Hints
{
   [[Enumeration that defines the types of Input Hints.

     @since 1.12
   ]]
   legacy: elm_input_hint;
   none                = 0,        [[No active hints

                                     @since 1.12]]
   auto_complete       = 1 << 0,   [[Suggest word auto completion

                                     @since 1.12]]
   sensitive_data      = 1 << 1,   [[Typed text should not be stored.

                                     @since 1.12]]
   autofill_credit_card_expiration_date   = 0x100, [[ Autofill hint for a credit card expiration date

                                                      @since 1.21]]
   autofill_credit_card_expiration_day    = 0x200, [[Autofill hint for a credit card expiration day

                                                     @since 1.21]]
   autofill_credit_card_expiration_month  = 0x300, [[ Autofill hint for a credit card expiration month

                                                      @since 1.21]]
   autofill_credit_card_expiration_year   = 0x400, [[ Autofill hint for a credit card expiration year

                                                      @since 1.21]]
   autofill_credit_card_number            = 0x500, [[ Autofill hint for a credit card number

                                                      @since 1.21]]
   autofill_email_address                 = 0x600, [[ Autofill hint for an email address

                                                      @since 1.21]]
   autofill_name                          = 0x700, [[ Autofill hint for a user's real name

                                                      @since 1.21]]
   autofill_phone                         = 0x800, [[ Autofill hint for a phone number

                                                      @since 1.21]]
   autofill_postal_address                = 0x900, [[ Autofill hint for a postal address

                                                      @since 1.21]]
   autofill_postal_code                   = 0xA00, [[ Autofill hint for a postal code

                                                      @since 1.21]]
   autofill_id                            = 0xB00  [[ Autofill hint for a user's ID

                                                      @since 1.21]]
}

interface @beta Efl2.Input.Text {
   [[All the functionality relating to input hints
   ]]
   methods {
      @property input_panel_show_on_demand {
         set {
            [[Set the attribute to show the input panel in case of only a user's explicit Mouse Up event.
              It doesn't request to show the input panel even though it has focus.
            ]]
         }
         get {
            [[Get the attribute to show the input panel in case of only an user's explicit Mouse Up event.
            ]]
         }
         values {
            ondemand: bool; [[If $true, the input panel will be shown in case of only Mouse up event.
            (Focus event will be ignored.)
            ]]
         }
      }
      @property input_panel_language {
         set {
            [[Set the language mode of the input panel.

              This API can be used if you want to show the alphabet keyboard mode.
            ]]
         }
         get {
            [[Get the language mode of the input panel.]]
         }
         values {
            lang: Efl2.Input.Text_Panel.Lang; [[Language to be set to the input panel.]]
         }
      }
      @property input_panel_layout_variation {
         set {
            [[Set the input panel layout variation of the entry
            ]]
         }
         get {
            [[Get the input panel layout variation of the entry
            ]]
         }
         values {
            variation: int; [[Layout variation type.]]
         }
      }
      @property autocapital_type {
         set {
            [[Set the autocapitalization type on the immodule.]]
         }
         get {
            [[Get the autocapitalization type on the immodule.]]
         }
         values {
            autocapital_type: Efl2.Input.Text_Autocapital.Type; [[The type of autocapitalization.]]
         }
      }
      @property input_panel_return_key_disabled {
         set {
            [[Set the return key on the input panel to be disabled.]]
         }
         get {
            [[Get whether the return key on the input panel should be disabled or not.]]
         }
         values {
            disabled: bool; [[The state to put in in: $true for
            disabled, $false for enabled.]]
         }
      }
      @property prediction_allow {
         set {
            [[Set whether the entry should allow predictive text.]]
         }
         get {
            [[Get whether the entry allows predictive text.]]
         }
         values {
            prediction: bool; [[Whether the entry should allow predictive text.]]
         }
      }
      @property input_hint {
         set {
            [[Sets the input hint which allows input methods to fine-tune their behavior.]]
         }
         get {
            [[Gets the value of input hint.]]
         }
         values {
            hints: Efl2.Input.Text_Hints; [[Input hint.]]
         }
      }
      @property input_panel_layout {
         set {
            [[Set the input panel layout of the entry.]]
         }
         get {
            [[Get the input panel layout of the entry.]]
         }
         values {
            layout: Efl2.Input.Text_Panel.Layout(Efl2.Input.Text_Panel.Layout.invalid); [[Layout type.]]
         }
      }
      @property input_panel_return_key_type {
         set {
            [[Set the "return" key type. This type is used to set string or icon on the "return" key of the input panel.

              An input panel displays the string or icon associated with this type.
            ]]
         }
         get {
            [[Get the "return" key type.]]
         }
         values {
            return_key_type: Efl2.Input.Text_Panel.Return_Key.Type; [[The type of "return" key on the input panel.]]
         }
      }
      @property input_panel_enabled {
         set {
            [[Sets the attribute to show the input panel automatically.]]
         }
         get {
            [[Get the attribute to show the input panel automatically.]]
         }
         values {
            enabled: bool; [[If $true, the input panel is appeared when entry is clicked or has a focus.]]
         }
      }
      @property input_panel_return_key_autoenabled {
         set {
            [[Set whether the return key on the input panel is disabled automatically when entry has no text.

              If $enabled is $true, the return key on input panel is disabled when the entry has no text.
              The return key on the input panel is automatically enabled when the entry has text.
              The default value is $false.
            ]]
         }
         values {
            enabled: bool; [[If $enabled is $true, the return key is automatically disabled when the entry has no text.]]
         }
      }

      input_panel_show {
         [[Show the input panel (virtual keyboard) based on the input panel property of entry such as layout, autocapital types and so on.

           Note that input panel is shown or hidden automatically according to the focus state of entry widget.
           This API can be used in the case of manually controlling by using @.input_panel_enabled.set(en, $false).
         ]]
      }

      // FIXME: wanted????
      input_panel_imdata_set {
         [[Set the input panel-specific data to deliver to the input panel.

           This API is used by applications to deliver specific data to the input panel.
           The data format MUST be negotiated by both application and the input panel.
           The size and format of data are defined by the input panel.
         ]]
         params {
            @in data: const(void_ptr); [[The specific data to be set to the input panel.]]
            @in len: int; [[The length of data, in bytes, to send to the input panel.]]
         }
      }
      input_panel_imdata_get @const {
         [[Get the specific data of the current input panel.]]
         params {
            @inout data: void; [[The specific data to be obtained from the input panel.]]
            @out len: int; [[The length of data.]]
         }
      }

      input_panel_hide {
         [[Hide the input panel (virtual keyboard).

           Note that input panel is shown or hidden automatically according to the focus state of entry widget.
           This API can be used in the case of manually controlling by using @.input_panel_enabled.set(en, $false)
         ]]
      }
   }
}
