mixin @beta Efl.Ui.Focus.Layer requires Efl.Ui.Widget extends Efl.Ui.Widget_Focus_Manager {
   [[This defines the widget as a focus layer.

     A focus layer is the uppermost widget which receives input and handles all focus related events for as long as
     it exists and is visible. It's not possible to escape this layer with focus movements.

     Once the object is hidden or destroyed the focus will go back to the main window, where it was before.
   ]]
   methods {
     @property enable @protected {
        [[Whether the focus layer is enabled.
          This can be handled automatically through @Efl.Gfx.Entity.visible and @.behaviour.]]
        values {
           v : bool; [[$true to set enable.]]
        }
     }
     @property behaviour @protected {
        [[Sets the behaviour of the focus layer.]]
        values {
           enable_on_visible : bool;  [[$true means layer will enable itself once the widget becomes visible]]
           cycle : bool; [[If $true the focus will cycle (from last object to first, and vice versa) in the layer.]]
        }
     }
   }
   implements {
      Efl.Ui.Widget_Focus_Manager.focus_manager_create;
      Efl.Ui.Widget.focus_state_apply;
      Efl.Gfx.Entity.visible {set;}
      Efl.Ui.Focus.Manager.move;
      Efl.Ui.Focus.Object.focus_manager { get; }
      Efl.Ui.Focus.Object.focus_parent { get; }
      Efl.Object.constructor;
      Efl.Object.invalidate;
   }
}
