interface @beta Efl.Config
{
   [[A generic configuration interface, that holds key-value pairs.]]
   methods {
      @property config {
         [[A generic configuration value, referred to by name.]]
         get {
            keys {
               name: string; [[Configuration option name.]]
            }
            values {
               value: any_value_ref @move;
                  [[The value. It will be empty if it doesn't exist. The caller
                    must free it after use (using $eina_value_free() in C).]]
            }
         }
         set {
            keys {
               name: string; [[Configuration option name.]]
            }
            values {
               value: const(any_value_ref);
                  [[Configuration option value. May be $null if not found.]]
            }
            return: bool; [[$false in case of error: value type was invalid, the
                            config can't be changed, config does not exist...]]
         }
      }
   }
}

/* NOTES:
 - Font hinting seems to be missing!
 - Elm_Color_Class list -> no need to return the struct, only the name matters
                           but also provide func to get desc from name
 - Elm_Color_Overlay -> see with Jee-Yong and his color patch (common intf)
 - elm_config_font_overlay_set -> ?
 - what else?
*/
